"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–¥–æ–º–æ—Å—Ç—è–º–∏.
"""

import os
import logging
import json
import tempfile
from datetime import datetime
from aiogram import Dispatcher, F, Bot
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext

from bot.states.dialog_states import BotStates
from bot.keyboards.vedomost_keyboards import (
    get_vedomosti_keyboard,
    get_vedomost_details_keyboard,
    get_search_keyboard,
    get_student_details_keyboard
)
from bot.keyboards.group_keyboards import get_groups_keyboard
from parsers.vsuet_parser import VsuetParser
from utils.data_exporter import DataExporter
from database_manager import DatabaseManager
from config import EXPORT_DIR

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


async def process_vedomost_pagination(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    action = callback.data
    data = await state.get_data()
    current_page = data.get('current_vedomost_page', 1)
    vedomosti = data.get('vedomosti', [])
    group_name = data.get('selected_group_name', "–í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if action == "vedomost_next_page":
        new_page = current_page + 1
    else:  # vedomost_prev_page
        new_page = max(1, current_page - 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await state.update_data(current_vedomost_page=new_page)

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = await get_vedomosti_keyboard(vedomosti, page=new_page)

    await callback.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {new_page}")
    await callback.message.edit_text(
        f"–ì—Ä—É–ø–ø–∞: {group_name}\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π: {len(vedomosti)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–¥–æ–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )


async def process_vedomost_back(callback: CallbackQuery, state: FSMContext, db_manager: DatabaseManager):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ
    data = await state.get_data()
    faculty_id = data.get('selected_faculty_id')
    faculty_name = data.get('selected_faculty_name', '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç')

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    await state.set_state(BotStates.select_group)

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    keyboard = await get_groups_keyboard(faculty_id, db_manager)

    if keyboard:
        await callback.message.edit_text(
            f"–§–∞–∫—É–ª—å—Ç–µ—Ç: {faculty_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_search_keyboard()
        )


async def process_vedomost_selection(callback: CallbackQuery, state: FSMContext, db_manager: DatabaseManager):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–µ–¥–æ–º–æ—Å—Ç–∏.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–µ–¥–æ–º–æ—Å—Ç–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    vedomost_id = callback.data.replace("vedomost_", "")

    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–µ–¥–æ–º–æ—Å—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(selected_vedomost_id=vedomost_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ –∏ —Å–ø–∏—Å–æ–∫ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π
        data = await state.get_data()
        group_name = data.get('selected_group_name', "–ì—Ä—É–ø–ø–∞")
        vedomosti = data.get('vedomosti', [])

        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ–¥–æ–º–æ—Å—Ç—å
        selected_vedomost = None
        for ved in vedomosti:
            if ved.id == vedomost_id:
                selected_vedomost = ved
                break

        if not selected_vedomost:
            await callback.answer("–í–µ–¥–æ–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–µ–¥–æ–º–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_search_keyboard()
            )
            return

        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞
        await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–¥–æ–º–æ—Å—Ç–∏...")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ–¥–æ–º–æ—Å—Ç–∏
        await state.update_data(selected_vedomost=selected_vedomost)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        vedomost_details = db_manager.get_vedomost_details(vedomost_id)

        if not vedomost_details:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
            parser = VsuetParser()
            vedomost_details = parser.get_detailed_ved(vedomost_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if vedomost_details:
                db_manager.save_vedomost_details(vedomost_id, vedomost_details)

        if vedomost_details:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(vedomost_details=vedomost_details)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–µ–¥–æ–º–æ—Å—Ç–∏
            await state.set_state(BotStates.view_vedomost)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            message_text = (
                f"üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–¥–æ–º–æ—Å—Ç–∏*\n\n"
                f"*–ì—Ä—É–ø–ø–∞:* {vedomost_details['group']}\n"
                f"*–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:* {vedomost_details['discipline']}\n"
                f"*–¢–∏–ø:* {vedomost_details['type']}\n"
                f"*–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* {vedomost_details['teacher']}\n"
                f"*–°–µ–º–µ—Å—Ç—Ä:* {vedomost_details['semester']}\n"
                f"*–£—á–µ–±–Ω—ã–π –≥–æ–¥:* {vedomost_details['year']}\n"
                f"*–°—Ç–∞—Ç—É—Å:* {vedomost_details['status']}\n"
                f"*–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {vedomost_details['date_update']}\n\n"
                f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:* {len(vedomost_details['students'])}\n"
            )

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–µ–¥–æ–º–æ—Å—Ç—å—é
            keyboard = get_vedomost_details_keyboard()

            await callback.message.edit_text(
                message_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await callback.message.edit_text(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–¥–æ–º–æ—Å—Ç–∏ {selected_vedomost.discipline}.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_search_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≤–µ–¥–æ–º–æ—Å—Ç–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await callback.message.edit_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–µ–¥–æ–º–æ—Å—Ç–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞.",
            reply_markup=get_search_keyboard()
        )


async def process_vedomost_detail_back(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≤–µ–¥–æ–º–æ—Å—Ç–µ–π.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –≤–µ–¥–æ–º–æ—Å—Ç–µ–π")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    vedomosti = data.get('vedomosti', [])
    group_name = data.get('selected_group_name', "–í—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞")
    current_page = data.get('current_vedomost_page', 1)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤–µ–¥–æ–º–æ—Å—Ç–∏
    await state.set_state(BotStates.select_vedomost)

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–µ–¥–æ–º–æ—Å—Ç–∏
    keyboard = await get_vedomosti_keyboard(vedomosti, page=current_page)

    await callback.message.edit_text(
        f"–ì—Ä—É–ø–ø–∞: {group_name}\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π: {len(vedomosti)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–¥–æ–º–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )


async def process_export_vedomost(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–µ–¥–æ–º–æ—Å—Ç–∏.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_format = callback.data.replace("export_", "")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    vedomost_details = data.get('vedomost_details')

    if not vedomost_details:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return

    try:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        await callback.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        group_name = vedomost_details['group']
        discipline = vedomost_details['discipline'].replace("/", "_").replace("\\", "_")
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        filename = f"{group_name}_{discipline}_{timestamp}"

        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        exporter = DataExporter(output_dir=EXPORT_DIR)

        if export_format == "json":
            filepath = exporter.export_to_json(vedomost_details, filename)
            file_description = "JSON"
        elif export_format == "csv":
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è CSV
            students_data = []
            for student in vedomost_details.get('students', []):
                student_data = {
                    'id': student.get('id', ''),
                    'name': student.get('name', ''),
                    'record_book': student.get('record_book', '')
                }

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –ö–¢
                for i, kt_result in enumerate(student.get('kt_results', []), 1):
                    student_data[f'kt_{i}'] = kt_result

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                student_data['final_rating'] = student.get('final_rating', '')
                student_data['rating_grade'] = student.get('rating_grade', '')
                student_data['exam_grade'] = student.get('exam_grade', '')
                student_data['final_grade'] = student.get('final_grade', '')

                students_data.append(student_data)

            filepath = exporter.export_to_csv(students_data, filename)
            file_description = "CSV"
        elif export_format == "excel":
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è Excel –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ CSV
            students_data = []
            for student in vedomost_details.get('students', []):
                student_data = {
                    'id': student.get('id', ''),
                    'name': student.get('name', ''),
                    'record_book': student.get('record_book', '')
                }

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –ö–¢
                for i, kt_result in enumerate(student.get('kt_results', []), 1):
                    student_data[f'kt_{i}'] = kt_result

                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                student_data['final_rating'] = student.get('final_rating', '')
                student_data['rating_grade'] = student.get('rating_grade', '')
                student_data['exam_grade'] = student.get('exam_grade', '')
                student_data['final_grade'] = student.get('final_grade', '')

                students_data.append(student_data)

            filepath = exporter.export_to_excel(students_data, filename)
            file_description = "Excel"
        else:
            await callback.answer(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {export_format}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        if not filepath or not os.path.exists(filepath):
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.answer(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ {file_description} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        await bot.send_document(
            callback.from_user.id,
            FSInputFile(filepath),
            caption=f"–≠–∫—Å–ø–æ—Ä—Ç –≤–µ–¥–æ–º–æ—Å—Ç–∏ '{discipline}' –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        await callback.message.reply(
            f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤–µ–¥–æ–º–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {file_description} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ."
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤–µ–¥–æ–º–æ—Å—Ç–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ")
        await callback.message.reply(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ")

async def process_show_detailed_vedomost(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–¥–æ–º–æ—Å—Ç–∏.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    vedomost_details = data.get('vedomost_details')

    if not vedomost_details:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    try:
        await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        message_text = (
            f"üìã *–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–¥–æ–º–æ—Å—Ç–∏*\n\n"
            f"*–ì—Ä—É–ø–ø–∞:* {vedomost_details['group']}\n"
            f"*–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:* {vedomost_details['discipline']}\n"
            f"*–¢–∏–ø:* {vedomost_details['type']}\n"
            f"*–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* {vedomost_details['teacher']}\n"
            f"*–ë–ª–æ–∫:* {vedomost_details['block']}\n"
            f"*–°–µ–º–µ—Å—Ç—Ä:* {vedomost_details['semester']}\n"
            f"*–ö—É—Ä—Å:* {vedomost_details['kurs']}\n"
            f"*–ß–∞—Å–æ–≤:* {vedomost_details['hours']}\n"
            f"*–£—á–µ–±–Ω—ã–π –≥–æ–¥:* {vedomost_details['year']}\n"
            f"*–°—Ç–∞—Ç—É—Å:* {vedomost_details['status']}\n"
            f"*–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {vedomost_details['date_update']}\n"
            f"*–ö–∞—Ñ–µ–¥—Ä–∞:* {vedomost_details['department']}\n"
            f"*–ü–ª–∞–Ω:* {vedomost_details['plan']}\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö
        if vedomost_details.get('kt_dates'):
            message_text += "*–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏:*\n"
            for i, (date, weight) in enumerate(zip(
                    vedomost_details.get('kt_dates', []),
                    vedomost_details.get('kt_weights', [])
            ), 1):
                message_text += f"–ö–¢ {i}: {date} (–≤–µ—Å: {weight})\n"
            message_text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö (–ø–µ—Ä–≤—ã–µ 5)
        students = vedomost_details.get('students', [])
        if students:
            message_text += f"*–°—Ç—É–¥–µ–Ω—Ç—ã ({len(students)} —á–µ–ª–æ–≤–µ–∫):*\n"
            for i, student in enumerate(students[:5], 1):
                message_text += f"{i}. {student['name']} - {student.get('final_grade', '')}\n"

            if len(students) > 5:
                message_text += f"... –∏ –µ—â–µ {len(students) - 5} —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–µ–¥–æ–º–æ—Å—Ç—å—é
        keyboard = get_vedomost_details_keyboard()

        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")


async def search_by_record_book(message: Message, state: FSMContext):
    """
    –ü–æ–∏—Å–∫ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    record_book = data.get('record_book')

    if not record_book:
        await message.answer(
            "–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_search_keyboard()
        )
        return

    await message.answer(f"üîç –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–µ: {record_book}...")

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = VsuetParser()

        # –í —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –º—ã –±—É–¥–µ–º –ø–µ—Ä–µ–±–∏—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ–¥–æ–º–æ—Å—Ç–∏ –∏ –∏—Å–∫–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤ –ø–∞—Ä—Å–µ—Ä–µ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
        faculties = parser.get_faculties()

        found_results = []
        student_name = None

        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º –∏ –≥—Ä—É–ø–ø–∞–º (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ –∫–µ—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for faculty in faculties[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            groups = parser.get_groups_by_faculty(faculty.id)

            for group in groups[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                vedomosti = parser.get_ved_list(group.id)

                for ved in vedomosti:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–¥–æ–º–æ—Å—Ç–∏
                    ved_details = parser.get_detailed_ved(ved.id)

                    if ved_details and 'students' in ved_details:
                        # –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—á–µ—Ç–∫–∏
                        for student in ved_details['students']:
                            if student.get('record_book') == record_book:
                                student_name = student.get('name')

                                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                found_results.append({
                                    'vedomost_id': ved.id,
                                    'discipline': ved_details['discipline'],
                                    'group': ved_details['group'],
                                    'semester': ved_details['semester'],
                                    'year': ved_details['year'],
                                    'final_grade': student.get('final_grade', '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏'),
                                    'kt_results': student.get('kt_results', []),
                                    'final_rating': student.get('final_rating', '')
                                })

                                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –≤–µ–¥–æ–º–æ—Å—Ç—å, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                                if len(found_results) >= 1:
                                    break

                        # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        if student_name and len(found_results) >= 1:
                            break

                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if student_name and len(found_results) >= 1:
                    break

            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if student_name and len(found_results) >= 1:
                break

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if student_name and found_results:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                student_name=student_name,
                found_results=found_results
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = (
                f"üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ*\n\n"
                f"*–°—Ç—É–¥–µ–Ω—Ç:* {student_name}\n"
                f"*–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏:* {record_book}\n\n"
                f"*–ù–∞–π–¥–µ–Ω–æ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π:* {len(found_results)}\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–µ–¥–æ–º–æ—Å—Ç—è—Ö
            for i, result in enumerate(found_results, 1):
                message_text += (
                    f"{i}. *{result['discipline']}*\n"
                    f"   –ì—Ä—É–ø–ø–∞: {result['group']}\n"
                    f"   –°–µ–º–µ—Å—Ç—Ä: {result['semester']}\n"
                    f"   –£—á–µ–±–Ω—ã–π –≥–æ–¥: {result['year']}\n"
                    f"   –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {result['final_grade']}\n"
                    f"   –†–µ–π—Ç–∏–Ω–≥: {result['final_rating']}\n\n"
                )

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
            keyboard = get_student_details_keyboard(record_book)

            await message.answer(
                message_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–µ {record_book} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_search_keyboard()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–µ: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_search_keyboard()
        )


async def search_by_record_book_db(message: Message, state: FSMContext, db_manager: DatabaseManager):
    """
    –ü–æ–∏—Å–∫ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    record_book = data.get('record_book')

    if not record_book:
        await message.answer(
            "–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_search_keyboard()
        )
        return

    await message.answer(f"üîç –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–µ: {record_book}...")

    try:
        # –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        student = db_manager.get_student_by_record_book(record_book)

        if not student:
            # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
            await search_by_record_book(message, state)
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ–¥–æ–º–æ—Å—Ç–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        vedomosti = db_manager.get_vedomosti_for_student(record_book)

        if not vedomosti:
            await message.answer(
                f"‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–æ–π {record_book}.\n"
                "–ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–∞–π—Ç...",
                reply_markup=get_search_keyboard()
            )
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
            await search_by_record_book(message, state)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message_text = (
            f"üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ*\n\n"
            f"*–°—Ç—É–¥–µ–Ω—Ç:* {student['name']}\n"
            f"*–ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏:* {record_book}\n\n"
            f"*–ù–∞–π–¥–µ–Ω–æ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π:* {len(vedomosti)}\n\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–µ–¥–æ–º–æ—Å—Ç—è—Ö
        for i, ved in enumerate(vedomosti[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 10 –≤–µ–¥–æ–º–æ—Å—Ç—è–º–∏
            message_text += (
                f"{i}. *{ved['discipline']}*\n"
                f"   –ì—Ä—É–ø–ø–∞: {ved['group_name']}\n"
                f"   –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {ved.get('final_grade', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"   –†–µ–π—Ç–∏–Ω–≥: {ved.get('final_rating', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            )

        if len(vedomosti) > 10:
            message_text += f"... –∏ –µ—â–µ {len(vedomosti) - 10} –≤–µ–¥–æ–º–æ—Å—Ç–µ–π\n\n"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = get_student_details_keyboard(record_book)

        await message.answer(
            message_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–∞–π—Ç...",
            reply_markup=get_search_keyboard()
        )
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
        await search_by_record_book(message, state)


async def process_export_student_results(callback: CallbackQuery, state: FSMContext, bot: Bot,
                                         db_manager: DatabaseManager):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞.

    Args:
        callback: –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏ –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö
    record_book = callback.data.replace("export_student_", "")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    student_name = data.get('student_name', '–°—Ç—É–¥–µ–Ω—Ç

    found_results = data.get('found_results', [])

    if not found_results:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
    return

    try:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        await callback.answer("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞...")

        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        clean_name = student_name.replace(" ", "_").replace(",", "")
        filename = f"student_{clean_name}_{record_book}_{timestamp}"

        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        exporter = DataExporter(output_dir=EXPORT_DIR)

        # –°–æ–∑–¥–∞–µ–º JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        student_data = {
            'name': student_name,
            'record_book': record_book,
            'results': found_results
        }

        filepath = exporter.export_to_json(student_data, filename)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        if not filepath or not os.path.exists(filepath):
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.answer("–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        await bot.send_document(
            callback.from_user.id,
            FSInputFile(filepath),
            caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ {student_name} (–∑–∞—á–µ—Ç–Ω–∞—è –∫–Ω–∏–∂–∫–∞ {record_book})"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
        await callback.message.reply(
            "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ."
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ")
        await callback.message.reply(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


def register_vedomost_handlers(dp: Dispatcher, db_manager: DatabaseManager):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–¥–æ–º–æ—Å—Ç—è–º–∏.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä Telegram –±–æ—Ç–∞
        db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π
    dp.callback_query.register(
        process_vedomost_pagination,
        F.data.in_({"vedomost_next_page", "vedomost_prev_page"}),
        BotStates.select_vedomost
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
    dp.callback_query.register(
        lambda callback, state: process_vedomost_back(callback, state, db_manager),
        F.data == "vedomost_back",
        BotStates.select_vedomost
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–µ–¥–æ–º–æ—Å—Ç–∏
    dp.callback_query.register(
        lambda callback, state: process_vedomost_selection(callback, state, db_manager),
        F.data.startswith("vedomost_"),
        ~F.data.in_({"vedomost_next_page", "vedomost_prev_page", "vedomost_back", "vedomost_detail_back"}),
        BotStates.select_vedomost
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –≤–µ–¥–æ–º–æ—Å—Ç–µ–π
    dp.callback_query.register(
        process_vedomost_detail_back,
        F.data == "vedomost_detail_back",
        BotStates.view_vedomost
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–µ–¥–æ–º–æ—Å—Ç–∏
    dp.callback_query.register(
        process_export_vedomost,
        F.data.in_({"export_json", "export_csv", "export_excel"}),
        BotStates.view_vedomost
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    dp.callback_query.register(
        process_show_detailed_vedomost,
        F.data == "show_details",
        BotStates.view_vedomost
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
    dp.callback_query.register(
        lambda callback, state, bot: process_export_student_results(callback, state, bot, db_manager),
        F.data.startswith("export_student_"),
        BotStates.search_record_book
    )