"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.
"""

import logging
import os
from typing import List, Dict, Any
from aiogram import Bot
from aiogram.types import FSInputFile
from database_manager import DatabaseManager
from data_updater import DataUpdater

logger = logging.getLogger(__name__)


async def check_and_send_notifications(bot: Bot, db_manager: DatabaseManager) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

    Args:
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications = db_manager.get_pending_notifications(limit=100)

        if not notifications:
            logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(notifications)} –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        user_notifications = {}
        for notification in notifications:
            user_id = notification['telegram_user_id']
            if user_id not in user_notifications:
                user_notifications[user_id] = []
            user_notifications[user_id].append(notification)

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±–Ω–æ–≤–∏—Ç–µ–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF
        data_updater = DataUpdater()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user_id, user_notifs in user_notifications.items():
            try:
                await send_notifications_to_user(bot, db_manager, data_updater, user_id, user_notifs)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        data_updater.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}", exc_info=True)


async def send_notifications_to_user(bot: Bot, db_manager: DatabaseManager, data_updater: DataUpdater,
                                     user_id: int, notifications: List[Dict[str, Any]]) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        db_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        data_updater: –û–±–Ω–æ–≤–∏—Ç–µ–ª—å –¥–∞–Ω–Ω—ã—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        notifications: –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    try:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤–µ–¥–æ–º–æ—Å—Ç—è–º
        vedomost_notifications = {}
        for notification in notifications:
            vedomost_id = notification['vedomost_id']
            if vedomost_id not in vedomost_notifications:
                vedomost_notifications[vedomost_id] = []
            vedomost_notifications[vedomost_id].append(notification)

        # –î–ª—è –∫–∞–∂–¥–æ–π –≤–µ–¥–æ–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        for vedomost_id, ved_notifs in vedomost_notifications.items():
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ–¥–æ–º–æ—Å—Ç—å –≤ PDF
            pdf_path = await data_updater.export_vedomost_to_pdf(vedomost_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
            message_text = "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≤–µ–¥–æ–º–æ—Å—Ç–∏*\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ–¥–æ–º–æ—Å—Ç–∏
            ved_notif = ved_notifs[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ–¥–æ–º–æ—Å—Ç–∏
            message_text += f"*–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:* {ved_notif['discipline']}\n"
            message_text += f"*–ì—Ä—É–ø–ø–∞:* {ved_notif['group_name']}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            for notif in ved_notifs:
                message_text += f"*–°—Ç—É–¥–µ–Ω—Ç:* {notif['student_name']}\n"

                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
                if notif['old_grade'] != notif['new_grade']:
                    message_text += f"*–û—Ü–µ–Ω–∫–∞:* {notif['old_grade']} ‚Üí {notif['new_grade']}\n"

                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
                if notif['old_rating'] != notif['new_rating']:
                    message_text += f"*–†–µ–π—Ç–∏–Ω–≥:* {notif['old_rating']} ‚Üí {notif['new_rating']}\n"

                message_text += "\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–¥–æ–º–æ—Å—Ç—å
            message_text += f"[–û—Ç–∫—Ä—ã—Ç—å –≤–µ–¥–æ–º–æ—Å—Ç—å](https://rating.vsuet.ru/web/Ved/Ved.aspx?id={vedomost_id})"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(
                user_id,
                message_text,
                parse_mode="Markdown",
                disable_web_page_preview=True
            )

            # –ï—Å–ª–∏ PDF-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
            if pdf_path and os.path.exists(pdf_path):
                try:
                    await bot.send_document(
                        user_id,
                        FSInputFile(pdf_path),
                        caption=f"–í–µ–¥–æ–º–æ—Å—Ç—å: {ved_notif['discipline']}"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF —Ñ–∞–π–ª–∞: {e}", exc_info=True)

            # –û—Ç–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
            for notif in ved_notifs:
                db_manager.mark_notification_as_sent(notif['id'])

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)