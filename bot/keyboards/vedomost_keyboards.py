"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–¥–æ–º–æ—Å—Ç—è–º–∏.
"""

import logging
import math
from typing import List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from models.vedomosti import VedomostInfo
from bot.config import BUTTON_LABELS, MAX_ITEMS_PER_PAGE

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


async def get_vedomosti_keyboard(vedomosti: List[VedomostInfo], page: int = 1) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–µ–¥–æ–º–æ—Å—Ç–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    Args:
        vedomosti: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–µ–¥–æ–º–æ—Å—Ç–µ–π
    """
    try:
        if not vedomosti:
            return None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        total_pages = math.ceil(len(vedomosti) / MAX_ITEMS_PER_PAGE)
        page = max(1, min(page, total_pages))
        start_idx = (page - 1) * MAX_ITEMS_PER_PAGE
        end_idx = min(start_idx + MAX_ITEMS_PER_PAGE, len(vedomosti))

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–µ–¥–æ–º–æ—Å—Ç–µ–π –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        for ved in vedomosti[start_idx:end_idx]:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ–¥–æ–º–æ—Å—Ç–∏ –∫ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
            status_emoji = "üîí" if ved.closed == "–î–∞" else "üîì"
            button_text = f"{ved.discipline} ({ved.type}) {status_emoji}"

            keyboard_builder.add(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"vedomost_{ved.id}"
                )
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigation_buttons = []

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–∫ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–ø)
        navigation_buttons.append(
            InlineKeyboardButton(
                text=BUTTON_LABELS["back"],
                callback_data="vedomost_back"
            )
        )

        # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            if page > 1:
                navigation_buttons.append(
                    InlineKeyboardButton(
                        text=BUTTON_LABELS["prev_page"],
                        callback_data="vedomost_prev_page"
                    )
                )

            if page < total_pages:
                navigation_buttons.append(
                    InlineKeyboardButton(
                        text=BUTTON_LABELS["next_page"],
                        callback_data="vedomost_next_page"
                    )
                )

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        navigation_buttons.append(
            InlineKeyboardButton(
                text=BUTTON_LABELS["main_menu"],
                callback_data="main_menu"
            )
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        for button in navigation_buttons:
            keyboard_builder.add(button)

        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏: –≤–µ–¥–æ–º–æ—Å—Ç–∏ –≤ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É, –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤ —Ä—è–¥
        keyboard_builder.adjust(1, len(navigation_buttons))

        return keyboard_builder.as_markup()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–µ–¥–æ–º–æ—Å—Ç–µ–π: {e}")
        return None


def get_vedomost_details_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–µ–¥–æ–º–æ—Å—Ç–∏.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard_builder.add(
            InlineKeyboardButton(
                text=BUTTON_LABELS["show_details"],
                callback_data="show_details"
            )
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        keyboard_builder.add(
            InlineKeyboardButton(
                text=BUTTON_LABELS["export_json"],
                callback_data="export_json"
            )
        )

        keyboard_builder.add(
            InlineKeyboardButton(
                text=BUTTON_LABELS["export_csv"],
                callback_data="export_csv"
            )
        )

        keyboard_builder.add(
            InlineKeyboardButton(
                text=BUTTON_LABELS["export_excel"],
                callback_data="export_excel"
            )
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_builder.add(
            InlineKeyboardButton(
                text=BUTTON_LABELS["back"],
                callback_data="vedomost_detail_back"
            )
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        keyboard_builder.add(
            InlineKeyboardButton(
                text=BUTTON_LABELS["main_menu"],
                callback_data="main_menu"
            )
        )

        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏: –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É, —ç–∫—Å–ø–æ—Ä—Ç –≤ –æ–¥–∏–Ω —Ä—è–¥, –Ω–∞–≤–∏–≥–∞—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ
        keyboard_builder.adjust(1, 3, 1, 1)

        return keyboard_builder.as_markup()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–µ–¥–æ–º–æ—Å—Ç—å—é: {e}")
        return None


def get_search_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞.

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∏—Å–∫–∞
    """
    try:
        keyboard_builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard_builder.add(
            InlineKeyboardButton(
                text="üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–µ",
                callback_data="search_by_record_book"
            )
        )

        keyboard_builder.add(
            InlineKeyboardButton(
                text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º –∏ –≥—Ä—É–ø–ø–∞–º",
                callback_data="browse_faculties"
            )
        )

        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫—É
        keyboard_builder.adjust(1)

        return keyboard_builder.as_markup()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–∏—Å–∫–∞: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return InlineKeyboardBuilder().as_markup()


def get_student_details_keyboard(record_book: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞.

    Args:
        record_book: –ù–æ–º–µ—Ä –∑–∞—á–µ—Ç–Ω–æ–π –∫–Ω–∏–∂–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    """
    try:
        keyboard_builder = InlineKeyboardBuilder()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard_builder.add(
            InlineKeyboardButton(
                text="üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                callback_data=f"export_student_{record_book}"
            )
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        keyboard_builder.add(
            InlineKeyboardButton(
                text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
                callback_data="search_by_record_book"
            )
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        keyboard_builder.add(
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        )

        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard_builder.adjust(1)

        return keyboard_builder.as_markup()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return InlineKeyboardBuilder().as_markup()